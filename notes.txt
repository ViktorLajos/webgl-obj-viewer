First, there is a difference between rendering a model and a rendering a mesh
from a model.  The Mesh is more atomic than the model and perhaps sometimes 
it is useful to group and render meshes together that aren't necessarily from
the same model.  From what I understand, it is typical to organize your meshes
by the material applied to them.  I am not sure that I understand what this
actually means.  It may refer to the shader program used to do the rendering?

At any rate, I will assume that rendering may be done by grouping the objects
based first on the shader program they depend on, and second by the textures they
depend on.  As such, the actual geometry that makes up the object is not the 
highest priority piece of state.  This is because the geometries for the scene
should be loaded ahead of time and thus the state change required to point to them
doesn't involve any uploading of data from CPU to GPU.

When you want to render a model in 3d, you have to do the following things:

1) Have a shader program
2) Have mesh geometry that works with this shader
3) Have textures defined for this mesh that are compatible/consumed by the shader

Renderer is a data structure that contains stored references to textures, shaders, and
meshes which the rendering function uses to determine what actions must be pushed onto
the render stack in order to draw that geometry.  

If we group the meshes in some way, we can avoid conditional checks inside our draw loop
which is a minor but probably important optimization for branch-prediction reasons.

if (currentMesh isnt correctMesh) then swapMeshes and Draw

If I have 3 cats with 1 common mesh, I need 3 draw calls to draw these cats.

I have a group of cats which are all the same GPU state except for a few matrices
which get uploaded that represent the orientation of a particular cat in space.
Please perform the minimum amount of steps to draw these cats.

The minimum steps for this are:

1) Setup pointers to mesh buffers
2) Setup texture channels and upload textures if needed
3) Setup appropriate shader program to draw these cats (gl.useProgram)
4) For each cat, upload matrices for cat orientation and draw
